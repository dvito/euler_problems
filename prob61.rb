# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

# Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
# Pentagonal	 	P5,n=n(3n1)/2	 	1, 5, 12, 22, 35, ...
# Hexagonal	 	P6,n=n(2n1)	 	1, 6, 15, 28, 45, ...
# Heptagonal	 	P7,n=n(5n3)/2	 	1, 7, 18, 34, 55, ...
# Octagonal	 	P8,n=n(3n2)	 	1, 8, 21, 40, 65, ...
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

# The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
# Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
# This is the only set of 4-digit numbers with this property.
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.


class Fixnum
  def pentagonal
    n = self
    pent = ((3*(n**2)) - n) / 2
    pent
  end
  def pentagonal?
    n = self
    test = (Math.sqrt(1.0 + (24.0 * n)) + 1.0) / 6.0
    return (test == test.to_i)
  end
  def triangle
  	n = self
  	tri = ((n**2)+ n) / 2
  	tri
  end
  def triangle?
  	n = self
  	test = (Math.sqrt(1.0+(8.0 * n)) - 1.0) / 2.0
  	return (test == test.to_i)
  end
  def hexagonal
  	n = self
  	hex = ((2*(n**2))-n)
  	hex
  end
  def hexagonal?
  	n = self
    test = (Math.sqrt(1.0 + (8.0 * n)) + 1.0) / 4.0
    return (test == test.to_i)
  end
  def square
  	n = self
  	square = n ** 2
  	return n
  end
  def square?
  	n = self
  	test = (Math.sqrt(1.0 * n))
  	return (test == test.to_i)
  end
end










